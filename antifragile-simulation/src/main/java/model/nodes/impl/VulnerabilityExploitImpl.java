/**
 */
package model.nodes.impl;

import model.nodes.NodesPackage;
import model.nodes.SoftwareType;
import model.nodes.VulnerabilityExploit;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Vulnerability Exploit</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link model.nodes.impl.VulnerabilityExploitImpl#getVulnerabilityId <em>Vulnerability Id</em>}</li>
 *   <li>{@link model.nodes.impl.VulnerabilityExploitImpl#getProbAttack <em>Prob Attack</em>}</li>
 *   <li>{@link model.nodes.impl.VulnerabilityExploitImpl#getVulnerableSoftware <em>Vulnerable Software</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VulnerabilityExploitImpl extends MinimalEObjectImpl.Container implements VulnerabilityExploit {
	/**
	 * The default value of the '{@link #getVulnerabilityId() <em>Vulnerability Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVulnerabilityId()
	 * @generated
	 * @ordered
	 */
	protected static final String VULNERABILITY_ID_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getVulnerabilityId() <em>Vulnerability Id</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVulnerabilityId()
	 * @generated
	 * @ordered
	 */
	protected String vulnerabilityId = VULNERABILITY_ID_EDEFAULT;

	/**
	 * The default value of the '{@link #getProbAttack() <em>Prob Attack</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getProbAttack()
	 * @generated
	 * @ordered
	 */
	protected static final double PROB_ATTACK_EDEFAULT = 0.0;

	/**
	 * The cached value of the '{@link #getProbAttack() <em>Prob Attack</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getProbAttack()
	 * @generated
	 * @ordered
	 */
	protected double probAttack = PROB_ATTACK_EDEFAULT;

	/**
	 * The cached value of the '{@link #getVulnerableSoftware() <em>Vulnerable Software</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getVulnerableSoftware()
	 * @generated
	 * @ordered
	 */
	protected SoftwareType vulnerableSoftware;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VulnerabilityExploitImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return NodesPackage.Literals.VULNERABILITY_EXPLOIT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getVulnerabilityId() {
		return vulnerabilityId;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVulnerabilityId(String newVulnerabilityId) {
		String oldVulnerabilityId = vulnerabilityId;
		vulnerabilityId = newVulnerabilityId;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NodesPackage.VULNERABILITY_EXPLOIT__VULNERABILITY_ID, oldVulnerabilityId, vulnerabilityId));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getProbAttack() {
		return probAttack;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setProbAttack(double newProbAttack) {
		double oldProbAttack = probAttack;
		probAttack = newProbAttack;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NodesPackage.VULNERABILITY_EXPLOIT__PROB_ATTACK, oldProbAttack, probAttack));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SoftwareType getVulnerableSoftware() {
		if (vulnerableSoftware != null && vulnerableSoftware.eIsProxy()) {
			InternalEObject oldVulnerableSoftware = (InternalEObject)vulnerableSoftware;
			vulnerableSoftware = (SoftwareType)eResolveProxy(oldVulnerableSoftware);
			if (vulnerableSoftware != oldVulnerableSoftware) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, NodesPackage.VULNERABILITY_EXPLOIT__VULNERABLE_SOFTWARE, oldVulnerableSoftware, vulnerableSoftware));
			}
		}
		return vulnerableSoftware;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SoftwareType basicGetVulnerableSoftware() {
		return vulnerableSoftware;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setVulnerableSoftware(SoftwareType newVulnerableSoftware) {
		SoftwareType oldVulnerableSoftware = vulnerableSoftware;
		vulnerableSoftware = newVulnerableSoftware;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, NodesPackage.VULNERABILITY_EXPLOIT__VULNERABLE_SOFTWARE, oldVulnerableSoftware, vulnerableSoftware));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABILITY_ID:
				return getVulnerabilityId();
			case NodesPackage.VULNERABILITY_EXPLOIT__PROB_ATTACK:
				return getProbAttack();
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABLE_SOFTWARE:
				if (resolve) return getVulnerableSoftware();
				return basicGetVulnerableSoftware();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABILITY_ID:
				setVulnerabilityId((String)newValue);
				return;
			case NodesPackage.VULNERABILITY_EXPLOIT__PROB_ATTACK:
				setProbAttack((Double)newValue);
				return;
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABLE_SOFTWARE:
				setVulnerableSoftware((SoftwareType)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABILITY_ID:
				setVulnerabilityId(VULNERABILITY_ID_EDEFAULT);
				return;
			case NodesPackage.VULNERABILITY_EXPLOIT__PROB_ATTACK:
				setProbAttack(PROB_ATTACK_EDEFAULT);
				return;
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABLE_SOFTWARE:
				setVulnerableSoftware((SoftwareType)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABILITY_ID:
				return VULNERABILITY_ID_EDEFAULT == null ? vulnerabilityId != null : !VULNERABILITY_ID_EDEFAULT.equals(vulnerabilityId);
			case NodesPackage.VULNERABILITY_EXPLOIT__PROB_ATTACK:
				return probAttack != PROB_ATTACK_EDEFAULT;
			case NodesPackage.VULNERABILITY_EXPLOIT__VULNERABLE_SOFTWARE:
				return vulnerableSoftware != null;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (vulnerabilityId: ");
		result.append(vulnerabilityId);
		result.append(", probAttack: ");
		result.append(probAttack);
		result.append(')');
		return result.toString();
	}

} //VulnerabilityExploitImpl
